
"use client";

import { AppShell } from '@/components/app-shell';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Loader2, RefreshCw, Atom, BookOpenCheck } from 'lucide-react';
import { useState, useCallback, useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';
import { generateScienceFacts, type GenerateScienceFactsOutput } from '@/ai/flows/generate-science-facts-flow';
import { Skeleton } from '@/components/ui/skeleton';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

interface ScienceFactItem {
  fact: string;
  explanation: string;
}

export default function ScienceFactsPage() {
  const [scienceFacts, setScienceFacts] = useState<ScienceFactItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();

  const fetchScienceFacts = useCallback(async () => {
    setIsLoading(true);
    // setScienceFacts([]); // Optional: clear previous facts while loading new ones
    try {
      const factsData: GenerateScienceFactsOutput = await generateScienceFacts();
      setScienceFacts(factsData.facts);
    } catch (error) {
      console.error("Failed to generate science facts:", error);
      toast({
        title: "Error Fetching Facts!",
        description: "Could not load new science facts from the AI. Please try again.",
        variant: "destructive",
      });
      // Keep existing facts or set an error state if preferred
    } finally {
      setIsLoading(false);
    }
  }, [toast]);

  useEffect(() => {
    fetchScienceFacts();
  }, [fetchScienceFacts]);

  return (
    <AppShell>
      <div className="container mx-auto py-8 space-y-8">
        <header className="text-center">
          <div className="inline-block bg-primary/10 p-4 rounded-full mb-4 shadow-md">
            <Atom className="h-12 w-12 text-primary" />
          </div>
          <h1 className="text-4xl font-extrabold tracking-tight text-primary mb-2">
            Daily Science Insights
          </h1>
          <p className="text-xl text-muted-foreground">
            Discover fascinating science facts with brief explanations, generated by AI!
          </p>
        </header>

        <Card className="shadow-xl max-w-2xl mx-auto">
          <CardHeader>
            <CardTitle className="text-2xl text-center">Today's Science Facts</CardTitle>
            <CardDescription className="text-center">
              Explore these five interesting facts from the world of science.
            </CardDescription>
          </CardHeader>
          <CardContent className="min-h-[200px]">
            {isLoading && (
              <div className="space-y-4 p-4">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="p-3 border rounded-md shadow-sm">
                    <Skeleton className="h-5 w-3/4 mb-2" />
                    <Skeleton className="h-4 w-full" />
                    <Skeleton className="h-4 w-5/6 mt-1" />
                  </div>
                ))}
              </div>
            )}
            {!isLoading && scienceFacts.length > 0 && (
              <Accordion type="single" collapsible className="w-full" defaultValue="fact-0">
                {scienceFacts.map((item, index) => (
                  <AccordionItem value={`fact-${index}`} key={index}>
                    <AccordionTrigger className="text-lg hover:no-underline text-left">
                      <span className="font-semibold text-primary mr-2">{index + 1}.</span> {item.fact}
                    </AccordionTrigger>
                    <AccordionContent className="text-muted-foreground pl-6 pr-2 text-sm leading-relaxed">
                      <div className="flex items-start gap-2">
                        <BookOpenCheck className="h-5 w-5 text-accent mt-1 shrink-0" />
                        <p>{item.explanation}</p>
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                ))}
              </Accordion>
            )}
            {!isLoading && scienceFacts.length === 0 && (
              <p className="text-muted-foreground text-center py-10">
                No science facts available at the moment. Try refreshing!
              </p>
            )}
          </CardContent>
          <CardFooter className="pt-6 flex justify-center">
            <Button onClick={fetchScienceFacts} disabled={isLoading} className="bg-primary hover:bg-primary/90">
              {isLoading ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <RefreshCw className="mr-2 h-5 w-5" />}
              {isLoading ? "Fetching Facts..." : "Get New Facts"}
            </Button>
          </CardFooter>
        </Card>
         <p className="text-center text-xs text-muted-foreground mt-4">
            All science facts and explanations are generated by AI.
        </p>
      </div>
    </AppShell>
  );
}
